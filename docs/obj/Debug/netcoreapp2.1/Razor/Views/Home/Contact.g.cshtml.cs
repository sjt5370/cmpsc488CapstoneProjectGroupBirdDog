#pragma checksum "C:\Users\johnf\Source\Repos\NicholasTHall\cmpsc488CapstoneProjectGroupBirdDog\Phase4\PromoWeb\PromotonalWeb\Views\Home\Contact.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2320f581004a70c8d9d5956092dc109e6494e4c7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Contact), @"mvc.1.0.view", @"/Views/Home/Contact.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Contact.cshtml", typeof(AspNetCore.Views_Home_Contact))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\johnf\Source\Repos\NicholasTHall\cmpsc488CapstoneProjectGroupBirdDog\Phase4\PromoWeb\PromotonalWeb\Views\_ViewImports.cshtml"
using PromotonalWeb;

#line default
#line hidden
#line 2 "C:\Users\johnf\Source\Repos\NicholasTHall\cmpsc488CapstoneProjectGroupBirdDog\Phase4\PromoWeb\PromotonalWeb\Views\_ViewImports.cshtml"
using PromotonalWeb.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2320f581004a70c8d9d5956092dc109e6494e4c7", @"/Views/Home/Contact.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"047149e70ca948e03e9334fb0c05104d259c047d", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Contact : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\johnf\Source\Repos\NicholasTHall\cmpsc488CapstoneProjectGroupBirdDog\Phase4\PromoWeb\PromotonalWeb\Views\Home\Contact.cshtml"
  
    ViewData["Title"] = "Support";

#line default
#line hidden
            BeginContext(43, 4, true);
            WriteLiteral("<h1>");
            EndContext();
            BeginContext(48, 17, false);
#line 4 "C:\Users\johnf\Source\Repos\NicholasTHall\cmpsc488CapstoneProjectGroupBirdDog\Phase4\PromoWeb\PromotonalWeb\Views\Home\Contact.cshtml"
Write(ViewData["Title"]);

#line default
#line hidden
            EndContext();
            BeginContext(65, 4716, true);
            WriteLiteral(@"</h1>

<div id=""androidDoc"">
    <h3>Using the Android Application</h3>
    <p>When the app is opened you will see the login page. Users can login using their account credientials created on the desktop application.  Depending on the user's account type, one of three screens will be displayed.</p>
    <p>
        If the User is a Picker, they will see the picking homescreen.  From here, they can click next pallet to get a new pallet from the database.  This will open a new screen displaying the details of the new pallet.
        Products are sorted by their picking priority, so Pickers should pick the products from top to bottom.  Tapping on the priority headings will collapse all products of that priority for easier viewing. If more details are needed, Pickers can tap a product to see the product description and manufacturer.
        When a Picker picks a product, they should tap the scan button to read the barcode. This will confirm that they have picked the correct product.  At any point a Picker c");
            WriteLiteral(@"an place the pallet on hold.  This will return the Picker to the picking homescreen and return all picked products back to the shelf.  When they have scanned all products, the finish order button will be activated. Upon clicking the button they will be returned to the picking homescreen.
    </p>
    <p>
        If the User is a Stocker, they will see the stocking homescreen. From here, the user may choose to either restock shelves by tapping the restocking button or receive incoming inventory by tapping the receiving button.
        Tapping the restocking button opens the restocking screen which displays a list of all products out of shelf stock or marked as in need of stocking by another employee. The user can select a product from the list by tapping it or search for a specific product by name, manufacturer, or description using the dropdown menu. Selecting a product will open its restocking screen, which displays the amount of bulk stock available to move. The user can enter a quantity to move and upd");
            WriteLiteral(@"ate the inventory by tapping the move button. If the quantity is valid, the inventory will update and the product will be removed from the list.
        Tapping the receiving button instead opens the camera for scanning barcodes of incoming products. Upon scanning a barcode, the user will be prompted to enter the quantity received. If the barcode is for a new product, the user will additionally need to enter information describing the product. <b>Users are encouraged to enter detailed and correct information, as it will be displayed to customers and utilized in future searches.</b> Tapping the pick up button will update the inventory and reopen the camera.
        When the user is finished, they may logout by tapping the icon on the top right of the main screens.
    </p>
    <p>
        If the User is a Driver, they will see the driving homescreen which displays a list of routes for which the pallets have been prepared. The user can select a route by tapping it, which will display the first stop with a ");
            WriteLiteral(@"list of orders to be delivered at that stop.
        The user can check off orders successfully delivered and tap the next stop button to proceed. Any checked orders will be marked as complete and unchecked orders will be deferred.
        Once all stops have been visited, the route will close and return to the route selection screen.
        When the user is finished, they may logout by tapping the icon on the top right of the main screen.
    </p>
</div>
<div id=""desktopDoc"">
    <h3>Using the Desktop Application</h3>
    <p>
        The desktop application is the centerpiece of the project, It does most of the heavy calculations and database management. The end user would use the desktop application to manage inventory in the warehouse. Create routes, edit routes, and thanks to our k means based algorithm, It almost writes the routes for you. In addition to this the desktop application is used to monitor and manage the pickers along with controlling the order and pace of the employees while puttin");
            WriteLiteral(@"g together orders. Finally the desktop gives the user the ability to Palletize their orders and adds an extra level of control to the ordering of the picks.
    </p>
</div>
<div id=""siteDoc"">
    <h3>Using the Ordering Website</h3>
    <p>
        The website first ask the user to log in.  On fail it takes the user back to the log in page.
        On success it takes the user to the products page.  From there the user can look at their
        Account Info, their order history and items that were in the orders.  They can also place
        orders for the products on the products page.
    </p>
</div>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
